--[[
  Main Entrypoint for Snowdrop Package Manager

  This file serves as the main entrypoint for the Snowdrop Lua package manager. It is responsible for bootstrapping the application and delegating control to the appropriate modules based on user input or CLI arguments. All initialization and top-level logic begins here.
]]--

---
-- Entry point for the Snowdrop CLI application.
-- Parses CLI arguments and dispatches to the appropriate command module.
--
-- @usage lua src/main.lua <command> [options]
--
-- @class MainEntrypoint

-- Add src/ to package.path if not already present
local src_path = "src/?.lua"
if not string.find(package.path, src_path, 1, true) then
  package.path = src_path .. ";" .. package.path
end

local downloader = require("src.lib.downloader")

local function prompt(msg, default)
  --- Prompts the user for input with an optional default value.
  --
  -- @param msg string The prompt message.
  -- @param default string The default value.
  -- @return string The user's input or the default value if empty.
  io.write(msg)
  if default then io.write(" [" .. default .. "]") end
  io.write(": ")
  local input = io.read()
  if input == "" or input == nil then return default else return input end
end

--- Loads the project manifest from project.lua.
-- @return table|nil, string|nil Manifest table or nil and error message.
local function load_manifest()
  local ok, manifest = pcall(dofile, "project.lua")
  if not ok then return nil, "Could not load project.lua: " .. tostring(manifest) end
  return manifest, nil
end

--- Saves the project manifest to project.lua.
-- @param manifest table Manifest table to save.
-- @return boolean, string True on success, false and error message on failure.
local function save_manifest(manifest)
  local file, err = io.open("project.lua", "w")
  if not file then return false, "Could not write project.lua: " .. tostring(err) end
  file:write("--[[\n  Project Manifest for Snowdrop-managed Lua Project\n\n  Generated by 'snowdrop init'. Edit fields as needed.\n]]--\n\nreturn {\n")
  file:write(string.format("  name = \"%s\",\n", manifest.name or ""))
  file:write(string.format("  type = \"%s\",\n", manifest.type or ""))
  file:write(string.format("  version = \"%s\",\n", manifest.version or ""))
  file:write(string.format("  license = \"%s\",\n", manifest.license or ""))
  file:write(string.format("  description = \"%s\",\n", manifest.description or ""))
  file:write("  scripts = {\n")
  for k, v in pairs(manifest.scripts or {}) do
    file:write(string.format("    %s = \"%s\",\n", k, v))
  end
  file:write("  },\n  dependencies = {\n")
  for k, v in pairs(manifest.dependencies or {}) do
    file:write(string.format("    [%q] = \"%s\",\n", k, v))
  end
  file:write("  }\n}\n")
  file:close()
  return true, nil
end

--- Ensures the lib directory exists.
local function ensure_lib_dir()
  local ok = os.execute("mkdir -p src/lib")
  if not ok then
    print("Warning: Could not create src/lib directory.")
  end
end

--- Installs all dependencies listed in project.lua or a specific dependency.
-- @param dep_name string|nil Dependency name to install (or all if nil).
-- @param dep_source string|nil Dependency source string (if installing a new dep).
local function install_dependency(dep_name, dep_source)
  ensure_lib_dir()
  local manifest, err = load_manifest()
  if not manifest then print(err) return end
  manifest.dependencies = manifest.dependencies or {}
  if dep_name and dep_source then
    -- Add or update dependency
    manifest.dependencies[dep_name] = dep_source
    local ok, err2 = save_manifest(manifest)
    if not ok then print(err2) return end
    print(string.format("Added dependency '%s' to project.lua.", dep_name))
  end
  for name, source in pairs(manifest.dependencies) do
    if (not dep_name) or (dep_name == name) then
      local out_path = string.format("src/lib/%s.lua", name)
      print(string.format("Installing %s from %s ...", name, source))
      local ok, err3 = downloader.download_file(source, out_path)
      if ok then
        print(string.format("Downloaded %s to %s", name, out_path))
      else
        print(string.format("Failed to download %s: %s", name, err3))
      end
    end
  end
end

--- Removes a dependency from project.lua and deletes its file.
-- @param dep_name string Dependency name to remove.
local function remove_dependency(dep_name)
  local manifest, err = load_manifest()
  if not manifest then print(err) return end
  manifest.dependencies = manifest.dependencies or {}
  if not manifest.dependencies[dep_name] then
    print(string.format("Dependency '%s' not found in project.lua.", dep_name))
    return
  end
  manifest.dependencies[dep_name] = nil
  local ok, err2 = save_manifest(manifest)
  if not ok then print(err2) return end
  print(string.format("Removed dependency '%s' from project.lua.", dep_name))
  local dep_path = string.format("src/lib/%s.lua", dep_name)
  os.remove(dep_path)
  print(string.format("Deleted file %s", dep_path))
end

local function init_project()
  --- Initializes a new Snowdrop project by interactively prompting the user for manifest fields and writing project.lua.
  print("Snowdrop Project Initialization\n-------------------------------")
  local manifest = {}
  manifest.name = prompt("Project name", "my-lua-project")
  manifest.type = "application"
  manifest.version = prompt("Project version", "0.0.1")
  manifest.license = prompt("License", "MIT")
  manifest.description = prompt("Description", "A sample Lua project using Snowdrop.")

  -- Scripts
  manifest.scripts = {}
  print("Add script commands (leave name empty to finish):")
  while true do
    local script_name = prompt("  Script name")
    if not script_name or script_name == "" then break end
    local script_cmd = prompt("    Command for '" .. script_name .. "'")
    manifest.scripts[script_name] = script_cmd
  end

  -- Dependencies
  manifest.dependencies = {}
  print("Add dependencies (leave name empty to finish):")
  while true do
    local dep_name = prompt("  Dependency name")
    if not dep_name or dep_name == "" then break end
    local dep_ver = prompt("    Version/source for '" .. dep_name .. "'")
    manifest.dependencies[dep_name] = dep_ver
  end

  -- Write manifest to project.lua
  local ok, err = save_manifest(manifest)
  if not ok then
    print("Error: Could not write project.lua - " .. tostring(err))
    os.exit(1)
  end
  print("\nproject.lua written successfully.")
end

local function main(...)
  --- The main entry point for the Snowdrop CLI application.
  --
  -- @param ... string CLI arguments.
  local args = {...}
  if args[1] == "init" then
    init_project()
    return
  elseif args[1] == "add" then
    if args[2] and args[3] then
      install_dependency(args[2], args[3])
    else
      install_dependency()
    end
    return
  elseif args[1] == "remove" then
    if args[2] then
      remove_dependency(args[2])
    else
      print("Usage: snowdrop remove <dep_name>")
    end
    return
  end
  print("Snowdrop Package Manager: main entrypoint initialized.")
  -- TODO: Parse CLI arguments and dispatch to subcommands/modules
end

main(...)
