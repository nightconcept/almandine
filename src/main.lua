--[[
  Main Entrypoint for Snowdrop Package Manager

  This file serves as the main entrypoint for the Snowdrop Lua package manager. It is responsible for bootstrapping the application and delegating control to the appropriate modules based on user input or CLI arguments. All initialization and top-level logic begins here.
]]--

---
-- Entry point for the Snowdrop CLI application.
-- Parses CLI arguments and dispatches to the appropriate command module.
--
-- @usage lua src/main.lua <command> [options]
--
-- @class MainEntrypoint

local function prompt(msg, default)
  --- Prompts the user for input with an optional default value.
  --
  -- @param msg string The prompt message.
  -- @param default string The default value.
  -- @return string The user's input or the default value if empty.
  io.write(msg)
  if default then io.write(" [" .. default .. "]") end
  io.write(": ")
  local input = io.read()
  if input == "" or input == nil then return default else return input end
end

local function init_project()
  --- Initializes a new Snowdrop project by interactively prompting the user for manifest fields and writing project.lua.
  print("Snowdrop Project Initialization\n-------------------------------")
  local manifest = {}
  manifest.name = prompt("Project name", "my-lua-project")
  manifest.type = prompt("Project type (library/application)", "library")
  manifest.version = prompt("Project version", "1.0.0")
  manifest.license = prompt("License", "MIT")
  manifest.description = prompt("Description", "A sample Lua project using Snowdrop.")

  -- Scripts
  manifest.scripts = {}
  print("Add script commands (leave name empty to finish):")
  while true do
    local script_name = prompt("  Script name")
    if not script_name or script_name == "" then break end
    local script_cmd = prompt("    Command for '" .. script_name .. "'")
    manifest.scripts[script_name] = script_cmd
  end

  -- Dependencies
  manifest.dependencies = {}
  print("Add dependencies (leave name empty to finish):")
  while true do
    local dep_name = prompt("  Dependency name")
    if not dep_name or dep_name == "" then break end
    local dep_ver = prompt("    Version/source for '" .. dep_name .. "'")
    manifest.dependencies[dep_name] = dep_ver
  end

  -- Write manifest to project.lua
  local file, err = io.open("project.lua", "w")
  if not file then
    print("Error: Could not write project.lua - " .. tostring(err))
    os.exit(1)
  end
  file:write("--[[\n  Project Manifest for Snowdrop-managed Lua Project\n\n  Generated by 'snowdrop init'. Edit fields as needed.\n]]--\n\nreturn {\n")
  file:write(string.format("  name = \"%s\",\n", manifest.name))
  file:write(string.format("  type = \"%s\",\n", manifest.type))
  file:write(string.format("  version = \"%s\",\n", manifest.version))
  file:write(string.format("  license = \"%s\",\n", manifest.license))
  file:write(string.format("  description = \"%s\",\n", manifest.description))
  file:write("  scripts = {\n")
  for k, v in pairs(manifest.scripts) do
    file:write(string.format("    %s = \"%s\",\n", k, v))
  end
  file:write("  },\n  dependencies = {\n")
  for k, v in pairs(manifest.dependencies) do
    file:write(string.format("    [%q] = \"%s\",\n", k, v))
  end
  file:write("  }\n}\n")
  file:close()
  print("\nproject.lua written successfully.")
end

local function main(...)
  --- The main entry point for the Snowdrop CLI application.
  --
  -- @param ... string CLI arguments.
  local args = {...}
  if args[1] == "init" then
    init_project()
    return
  end
  print("Snowdrop Package Manager: main entrypoint initialized.")
  -- TODO: Parse CLI arguments and dispatch to subcommands/modules
end

main(...)
