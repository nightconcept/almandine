# Project Development Guidelines for AI Assistant

**Objective:** These guidelines define the mandatory process, testing requirements, and interaction protocols for AI assistance on this project. Adherence is required for all contributions.
---

## 3. Development Workflow & Modification Rules

- **Implementation Plan:** Always create the plan outlined in Section 1 before coding.
- **Read First:** Always read and understand existing code before modifying or adding to it.
- **Focus:** Keep changes focused on the specific task. Do not refactor unrelated code unless it's part of the explicit task.
- **Small Functions:** Prefer small, single-purpose functions.
- **Code Modification Principles:**
  - Aim for clean, elegant, and idiomatic solutions in the framework and language used.
  - Explain the *rationale* behind significant suggestions or changes.
  - Propose minimal, incremental changes that are easy to review.
  - Prioritize low-risk refactoring.
  - Avoid code duplication; promote reusability.
  - Leverage Lua's strengths (tables, first-class functions).
  - Be aware of common pitfalls in the framework and language used.
- **Dependencies:** Do not introduce new external dependencies unless absolutely necessary and explicitly discussed/approved.
- **Commits:** Ensure commit messages follow the Conventional Commits specification (`https://www.conventionalcommits.org/en/v1.0.0/`). (AI will likely provide code/suggestions, user performs the commit).
- **Manual Testing:** When developing a task for TASK.md, always allow user to manually test the changes and provide instructions.

---

## 4. Specifying and Verifying Behavior

- **Specify Behavior for New/Modified Components:** Any new feature (function, class, significant logic) or modification to existing logic requires corresponding specifications that describe its expected behavior. This ensures clarity and verifies *what* it's supposed to do from an external viewpoint.

- **Specification Location:** Behavior specifications must reside in a top-level `/spec` directory. This directory's structure should mirror the source code being specified, making it easy to locate relevant specifications.
  - *Example:* Specifications for `game/engine/my_module.lua` belong in `spec/engine/my_module_spec.lua`.

- **Describe Key Behavioral Scenarios:** Each component's specification should describe its behavior under various conditions using `describe` and `it` blocks. At minimum, include scenarios covering:
  - **Expected Behavior:** At least one example (`it` block) describing the typical, successful interaction or outcome (the "happy path").
    - *Example:* `it("should return the correct sum for two positive numbers")`
  - **Boundary Conditions:** At least one example exploring behavior at known or likely limits or edge cases.
    - *Example:* `it("should handle empty input lists gracefully")`
    - *Example:* `it("should clamp position at the maximum screen boundary")`
  - **Handling Undesired Situations:** At least one example describing how the component behaves when encountering errors, invalid inputs, or exceptional conditions.
    - *Example:* `it("should return nil when a required parameter is missing")`
    - *Example:* `it("should error if division by zero is attempted")`

- **Maintain Living Documentation:** Software evolves, and so must its specifications. When modifying existing logic, **review and update the corresponding specifications** to ensure they accurately reflect the component's *current* behavior. Outdated specifications are misleading.

- **AI Collaboration in Specification:** When assisting with behavior specification:
  - **DO** generate executable specification code using `busted` in `_spec.lua` files (aligning with Busted's convention).
  - **DO** clearly summarize suggested specifications by describing the *behavior* being specified and its context. Frame suggestions around *what* should happen under certain conditions, suitable for `describe` or `it` blocks.
  - *Example:* "Specify behavior when `my_function` receives `nil` input."
  - *Example:* "Specify player collision behavior at the screen edge."
  - *Example:* "Describe the outcome when saving data with an invalid format."
  - Use the `busted` library for all specifications.
  - Within specification files (`_spec.lua`), use full module paths for `require` statements (e.g., `require("game.engine.core.scene")`).

---

## 5. AI Interaction Protocols

- **Clarity:** Never assume missing context or requirements. If uncertain about the task, project state, or constraints, **ask clarifying questions** before proceeding.
- **Factuality:** Do not "hallucinate" or invent libraries, functions, APIs, or file paths. Only use verified LÃ–VE APIs, standard Lua functions, and modules confirmed to exist within the project.
- **Verification:** Always confirm file paths and module names exist (based on provided context or previous interactions) before referencing them in code examples, tests, or explanations.
- **Code Modification Safety:** Never delete or overwrite existing code unless:
  - Explicitly instructed to do so by the user.
  - It is a defined part of the current task listed in `TASK.md`.
- **Model Capability Awareness:** If you assess that a task is complex and might benefit significantly from a more advanced model's capabilities, state this clearly **at the beginning of your response** using **bold text**. Example: "**Suggestion: This refactoring task is complex and involves deep analysis of interactions. A more advanced model might provide a more robust solution.**"
- **Collaboration Style:** Respond in a friendly, helpful, and collaborative tone, as if we are teammates working together.
- **Task Completion:** Upon completing the implementation/suggestion for a task, explicitly state that the task requirements (as understood) have been met. Remind the user to mark the task as complete in `TASK.md`.